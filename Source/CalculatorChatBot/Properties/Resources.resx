<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ArithmeticCarouselCardContent" xml:space="preserve">
    <value>The arithmetic operations are the most rudimentary operations that I perform. To be precise, I can calculate: the sum; the difference; the product; the quotient; and the remainder for a list of numbers. I also will throw up errors if I need to.</value>
    <comment>The card content for the arithmetic carousel card</comment>
  </data>
  <data name="ArithmeticCarouselCardTitleText" xml:space="preserve">
    <value>Arithmetic</value>
    <comment>The title text for the first of the three carousel cards in the welcome tour for the calculator chat bot</comment>
  </data>
  <data name="CannotPickUpCommandText" xml:space="preserve">
    <value>I'm not able to decipher any input commands here!</value>
    <comment>The default text when the bot is not able to pick up any commands.</comment>
  </data>
  <data name="CurrentMethodBeingImplementedMessage" xml:space="preserve">
    <value>This current method is being implemented, I cannot return any results right now!</value>
    <comment>The message for the current functionality implementation being at the "in-progress" stage.</comment>
  </data>
  <data name="GeometricCarouselCardContent" xml:space="preserve">
    <value>I can also perform some geometric operations such as: calculating the discriminant; calculating the roots of a quadratic equation; calculating the hypotenuse given two legs of a triangle; calculating the area and perimeter of polygons; and more...</value>
    <comment>The card content of the geometric carousel card</comment>
  </data>
  <data name="GeometricCarouselCardTitleText" xml:space="preserve">
    <value>Geometric</value>
    <comment>The title text for second of the three carousel cards in the welcome tour for the calculator chat bot</comment>
  </data>
  <data name="MembersBeingAddedMessage" xml:space="preserve">
    <value>Members being added</value>
    <comment>Telemetry message at the time when this bot is being installed in either a personal or teams scope.</comment>
  </data>
  <data name="StatisticalCarouselCardContent" xml:space="preserve">
    <value>The statistical operations that I can do include, but are not limited to: the average; the median; the mode; the range; and other operations. The only way to find out whether or not I calculate a specific metric is to actually send me a command. As an example: mean 1,2,3 and I would return the result of 2</value>
    <comment>The card content of the statistical carousel card</comment>
  </data>
  <data name="StatisticalCarouselCardTitleText" xml:space="preserve">
    <value>Statistical</value>
    <comment>The title text for the third of the three carousel cards in the welcome tour for the calculator chat bot</comment>
  </data>
  <data name="TakeATourText" xml:space="preserve">
    <value>Take a tour</value>
    <comment>Text for taking a tour</comment>
  </data>
  <data name="WelcomeCardBulletListItem1" xml:space="preserve">
    <value>* Arithmetic</value>
    <comment>The first bulleted list item - Arithmetic</comment>
  </data>
  <data name="WelcomeCardBulletListItem2" xml:space="preserve">
    <value>* Geometric</value>
    <comment>The second bulleted list item - Geometric</comment>
  </data>
  <data name="WelcomeCardBulletListItem3" xml:space="preserve">
    <value>* Statistical</value>
    <comment>The third bulleted list item - Statistical</comment>
  </data>
  <data name="WelcomeCardContentPart1" xml:space="preserve">
    <value>I am the new and improved {0} - unlike my cousin in v3, I can work a little better. Yes I can do everything my cousin can, and possibly a little more...in due ⏰</value>
    <comment>Card content part 1, and {0} represents the placeholder for the bot display name</comment>
  </data>
  <data name="WelcomeCardContentPart2" xml:space="preserve">
    <value>Curious are we? Here are the categories of operations that I can do:</value>
    <comment>Card content part 2, and it will then be the preview of the categories of operations that will be conducted</comment>
  </data>
  <data name="WelcomeCardTitle" xml:space="preserve">
    <value>Hello 👋</value>
    <comment>Card content title</comment>
  </data>
</root>